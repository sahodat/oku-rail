   <!--remove if this supports IE7 and below-->
    <!--[if lt IE 7]>
      <p class="chromeframe">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> or <a href="http://www.google.com/chromeframe/?redirect=true">activate Google Chrome Frame</a> to improve your experience.</p>
    <![endif]-->

    <SCRIPT language="JavaScript">
    window.onload = function () {

    function CircleMenu(target, data, selectedByKey, opt, func) {
      this.data = null;
      this.items = [];
      this.steps = null;
      this.lastPos = [];
      this.currentSelected = 0;
      this.animate = false;

      this.lastItemInTop = null;
      this.lastItemInBottom = null;

      this.onInit = func.onInit;
      this.onChangeBegin = func.onChangeBegin;
      this.onChangeComplete = func.onChangeComplete;
      this.onLoadPageComplete = func.onLoadPageComplete;

      this.init = function() {
        var that = this;

        if(data && data.length > 0) {
          that.createSteps();
          that.createItems();

          this.onInit ? this.onInit(that.currentSelected) : null;

          _.forEach(that.items, function(d, i){
            d.find('a').on('click', function(){
              var url = $(this).attr('href');
              that.goto(url);
              return false;
            });
          });

          $('.cm-button-prev, color:#454545;').on('click', function(){
            that.prev();
          });
          $('.cm-button-next').on('click', function(){
            that.next();
          });
        }else {
          console.log('%c CircleMenu ', 'background: #4bd187; color: #333', 'No data');
          target.hide();
        }
      }

      this.createItems = function() {
        var that = this;
        var cm_items = target.find('.cm-items');
        var offset = _.findIndex(data, [opt.key, selectedByKey]);

        _.forEach(data, function(d, i){
          cm_items.append('<li2 id="item-'+i+'" class="cm-item"><a href="'+d.url+'" title="'+d.label+'">'+d.label+'</a></li2>');
          that.items.push($('#item-'+i));
        });

        that.select(offset, {init: true});
      }

      this.createSteps = function() {
        var that = this;
        var theta = [], steps = [], positiveSteps = [];
        var widePerItem = 30;

        var max_dat = data.length;

        _.forEach(data, function(d, i){
          var posX = 0, posY = 0;

          if(i <= Math.round((max_dat - 1) / 2)) {
            theta.push((widePerItem / 360) * i * Math.PI);

            posX = Math.round((550 / 2) * (Math.cos(theta[i])));
            posY = -Math.round((550 / 2) * (Math.sin(theta[i])));

            steps.push({ left: posX, top: posY });
          }else {
            var x = i - Math.round((max_dat - 1) / 2);
            positiveSteps.push({ left: steps[x].left, top: steps[x].top * -1 });
          }
        });

        if(positiveSteps.length > 0) {
          that.lastItemInTop = steps.length - 1;
          that.lastItemInBottom = steps.length;

          that.steps = _.concat(steps, _.reverse(positiveSteps));
        }
      }

      this.next = function() {
        var that = this, offset = that.currentSelected;
        var min_offset = 0, max_offset = data.length - 1;

        offset = offset < max_offset ? offset + 1 : min_offset;

        this.select(offset, {next: true});
      }

      this.prev = function() {
        var that = this, offset = that.currentSelected;
        var min_offset = 0, max_offset = data.length - 1;

        offset = offset > min_offset ? offset - 1 : max_offset;

        this.select(offset, {prev: true});
      }

      this.goto = function(targetSelected) {
        var that = this;
        var offset = _.findIndex(data, [opt.key, targetSelected]);

        that.select(offset, {goto: true});
      }

      this.select = function(offset, selectOpt) {
        var that = this, max_dat = data.length;
        var cm_label = $('.cm-selected-label');

        if(offset >= 0) {
          if(!that.animate) {
            that.animate = true;

            var newPos = [];
            var lastItem = null, lastItem_bot = null;

            that.onChangeBegin ? that.onChangeBegin() : null;

            var completeAnimation = function(i) {
              cm_label.find('span').text(data[offset].label);
              cm_label.find('span').fadeIn(300);

              that.lastPos[i] = {
                left: newPos[i].css.left,
                top: newPos[i].css.top,
              }

              if(i == offset) {
                that.onChangeComplete ? that.onChangeComplete(data[i]) : null;
              }

              that.animate = false;
            }

            cm_label.find('span').fadeOut(300);

            _.forEach(that.items, function(d, i){
              d.fadeIn(800, function(){
                d.removeClass('selected');
              });

              var pos_id = (i - offset + max_dat) % max_dat;

              if(pos_id == that.lastItemInTop) {
                lastItem = i;
              }

              if(pos_id == that.lastItemInBottom) {
                lastItem_bot = i;
              }

              if(selectOpt && selectOpt.init) {
                that.lastPos.push({
                  left: that.steps[pos_id].left,
                  top: that.steps[pos_id].top,
                });
              }

              newPos.push({
                left: that.steps[pos_id].left,
                top: that.steps[pos_id].top,
                onComplete: completeAnimation,
                onCompleteParams:[i]
              });

              if(offset == i) {
                d.fadeOut(100, function(){
                  d.addClass('selected');
                });
              }
            });

            if(selectOpt && selectOpt.goto) {
              _.forEach(that.items, function(d, i){
                d.hide();
              });

              that.animateList(newPos);

              setTimeout(function() {
                _.forEach(that.items, function(d, i){
                  !d.hasClass('selected') ? d.fadeIn() : null;
                });
              }, 1000);
            }else {
              if(selectOpt && selectOpt.init) {
                that.animateList(newPos);
              }else {
                that.animateList(newPos, selectOpt, lastItem, lastItem_bot);
              }
            }

            that.currentSelected = offset;
          }
        }else {
          console.log('%c CircleMenu ', 'background: #4bd187; color: #333', 'Can\'t find selected item "'+selectedByKey+'" with offset "'+offset+'"');
          target.hide();
        }
      }

      this.animateList = function(newPos, selectOpt, lastItem, lastItem_bot) {
        var that = this;

        _.forEach(that.items, function(d, i){
          if(i == lastItem && selectOpt && selectOpt.next == true) { //perform next animation only for last in top section
            d.fadeOut(function(){
              TweenMax.fromTo(d, 1, that.lastPos[i], newPos[i]);

              setTimeout(function() {
                d.fadeIn();
              }, 800);
            });
          }else if(i == lastItem_bot && selectOpt && selectOpt.prev == true) { //perform previous animation only for last in bottom section
            d.fadeOut(function(){
              TweenMax.fromTo(d, 1, that.lastPos[i], newPos[i]);

              setTimeout(function() {
                d.fadeIn();
              }, 800);
            });
          }else {
            TweenMax.fromTo(d, 1, that.lastPos[i], newPos[i]); //perform next-previous animation for all items
          }
        });
      }

      this.init();
      }
    }
      </SCRIPT>

  <SCRIPT language="JavaScript">
        window.onload = function () {
        $(function(){
      var DATA = []
      var data = ["Ueno-Tokyo", "Tokyo-Shinagwa", "Shinagwa-Shibuya","Shibuya-Shinjyuku","Shinjyuku-Ikebukuro","Ikebukuro-Ueno"];
    for(var i=0;i<=5;i++) {
        DATA.push({
          label: data[i],
          url: 'menu-'+i
        });
      }

      var SELECTED = tmp[1];

      var OPTIONS = {
        key: 'url',
        pageLoader: {
          target: null,
          key: 'url'
        }
      }

      var FUNC = {
        onInit: function() {
          console.log('INIT');
        },
        onChangeBegin: function() {
          console.log('CHANGE');
        },
        onChangeComplete: function(d) {
          console.log('CHANGE_COMPLETE');
        }
      };







      var circleMenu = new CircleMenu($('#my-circle-menu'), DATA, SELECTED, OPTIONS, FUNC,);
    });
    }
    </SCRIPT>
  <script type="text/javascript">

 // var _gaq = _gaq || [];
 // _gaq.push(['_setAccount', 'UA-36251023-1']);
 // _gaq.push(['_setDomainName', 'jqueryscript.net']);
 // _gaq.push(['_trackPageview']);

 // (function() {
 //   var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 //   ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 //   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 // })();

</script>

  <a href="#" class="backbutton" '>＜ <!--  戻るボタン -->
      <SCRIPT language="JavaScript">
        $('.backbutton').on('click', function() {
                location.href = '/';
        });
      </SCRIPT>
    </a>
<!DOCTYPE html>
<html>
  <head>
    <title>oku-rail_delay</title>

    <meta charset="UTF-8">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <%= Gon::Base.render_data %>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>

<SCRIPT language="JavaScript">

var query = location.search;
var tmp = query.split('=');
var selectstation = tmp[1];
console.log(selectstation);

var yam = gon.yam;
var yamdelay = gon.yamdelay;
var yamhugedelay = gon.yamhugedelay;
// console.log(yam);
// console.log(yamdelay);
// console.log(yamhugedelay);

testcount = 0.0;
testdelaycount = 0.0;
testhugedelaycount = 0.0;
var sum = 0.0;
var sums = 0.0;
var sumh = 0.0;

//menu-0
if (selectstation == "menu-0"){
showselectstation = "Ueno"; get_value();
showselectstation = "Okachimachi"; get_value();
showselectstation = "Akihabara"; get_value();
showselectstation = "Kanda"; get_value();
initialize();
}

// menu-1
if (selectstation == "menu-1"){
showselectstation = "Tokyo"; get_value();
showselectstation = "Yurakucho"; get_value();
showselectstation = "Shimbashi"; get_value();
showselectstation = "hamamatsucho"; get_value();
showselectstation = "Tamachi"; get_value();
initialize();
}

//menu-2
if (selectstation == "menu-2"){
showselectstation = "Shinagawa"; get_value();
showselectstation = "Osaki"; get_value();
showselectstation = "Gotanda"; get_value();
showselectstation = "Meguro"; get_value();
showselectstation = "Ebisu"; get_value();
initialize();
}

//menue-3
if (selectstation == "menu-3"){
showselectstation = "Shibuya"; get_value();
showselectstation = "Harajyuku"; get_value();
showselectstation = "Yoyogi"; get_value();
initialize();
}

//menue-4
if (selectstation == "menu-4"){
showselectstation = "Shinjuku"; get_value();
showselectstation = "ShinOkubo"; get_value();
showselectstation = "Takadanobaba"; get_value();
showselectstation = "Mejiro"; get_value();
initialize();
}

//menue-5
if (selectstation == "menu-5"){
showselectstation = "Ikebukuro"; get_value();
showselectstation = "Otsuka"; get_value();
showselectstation = "Sugamo"; get_value();
showselectstation = "Komagome"; get_value();
showselectstation = "Tabata"; get_value();
showselectstation = "NishiNippori"; get_value();
showselectstation = "Nippori"; get_value();
showselectstation = "Uguisudani"; get_value();
initialize();
}

function get_value(){
testcount = 0.0;
testdelaycount = 0.0;
testhugedelaycount = 0.0;
    //判定部分作成
            DD = new Date();  //現在時刻の取得
            Hours = DD.getHours();
            var hour = Number(Hours) ;
            hour = 10;//テスト用
            //方向部分は作り直し
            var direction = "OuterLoop";
            var direction2 = "InnerLoop";
            var classifier = hour + ', "' + showselectstation +'", "' + direction + '"' ;  //

            for(key in yamdelay){
                tmpi = key;
                tmpi = tmpi.replace("[","");
                tmpi = tmpi.replace("]","");
                // console.log(tmpi);
                // console.log(classifier);
                if(tmpi == classifier){
                     testdelaycount = yamdelay[key];
                     // console.log("keyは",tmpi);
                     //     console.log("識別器は",classifier);
                     // console.log(yamdelay[key]);
                     for (key in yam){
                        tmpj = key;
                        tmpj = tmpj.replace("[","");
                        tmpj = tmpj.replace("]","");
                        if (tmpj == classifier){
                        testcount = yam[key];
                         console.log("keyは",tmpj);
                         console.log("識別器は",classifier);
                         console.log(yamhugedelay[key]);
                        }
                     }
                }
            }

            for(key in yamhugedelay){
                tmpi = key;
                tmpi = tmpi.replace("[","");
                if (tmpi.match(classifier)){
                     testhugedelaycount = yamhugedelay[key];
                }
            }
            // console.log(testcount);
            // console.log(testdelaycount);

            sum = sum + testcount
            sums = sums + testdelaycount
            sumh = sumh + testhugedelaycount

            testresult = (sums / sum)*100;
            testresulth = (sumh / sum)*100;
            console.log("今の（小）件数",testdelaycount);
            console.log("今の確率（小）",testresult);
            console.log("今の（大）件数",testhugedelaycount);
            console.log("今の確率（大）",testresulth);
            console.log("合計件数",sum);
            console.log("合計小規模",sums);
            console.log("合計大規模",sumh);
            console.log("-----------------------------------")
};

function initialize(){
 testcount = 0.0;
 testdelaycount = 0.0;
 testhugedelaycount = 0.0;
 sum = 0.0;
 sums = 0.0;
 sumh = 0.0;
}

</SCRIPT>
    <div class="wrap">
      <h1>Delay Prediction</h1>
      <h2>long time</h2>
      <h3>Short time
   <!--      <SCRIPT language="JavaScript">
            document.write(gon.weather);
        </SCRIPT> -->

      </h3>
      <h4>
        <SCRIPT language="JavaScript">
            tmpresult = testresulth.toFixed(1);
            tmpresult = tmpresult * gon.mag;//天気で倍率
            tmpresult = tmpresult.toFixed(1);
            if (tmpresult > 100){
            tmpresult = 100.0;
            };

            document.write(tmpresult,"%");
        </SCRIPT>
    </h4>
    <h5>
        <SCRIPT language="JavaScript">
            tmpresult = testresult.toFixed(1);
            tmpresult = tmpresult * gon.mag;//天気で倍率
            tmpresult = tmpresult.toFixed(1);
            if (tmpresult > 100){
            tmpresult = 100.0;
            };

            document.write(tmpresult,"%");
        </SCRIPT>
    </h5>
      <div id="my-circle-menu" class="cm-container"style ='position: fixed; color:#6AC1B7;'>
        <ul class="cm-items" style="color:#6AC1B7;">
        </ul>
        <div class="cm-selected-container" style='color:#6AC1B7;'>
          <div class="cm-selected-label" style='color:#6AC1B7;'>
            <span><!-- Menu Pertama --></span>
          </div>
          <a class="cm-button cm-button-prev" type="button" title="Previous"><i class="fa fa-chevron-left"></i></a>
          <a class="cm-button cm-button-next" type="button" title="Next"><i class="fa fa-chevron-right"></i></a>
        </div>
      </div>
    </div>

